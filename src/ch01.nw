\documentclass[nobib]{tufte-handout}


\input{preamble.tex}


% \usepackage[xindy,nopostdot]{glossaries}
% \makeglossaries
% \input{glossary}
% \renewcommand*{\glstextformat}[1]{\textsl{#1}}


\hypersetup{
  pdffitwindow=true,
  pdfstartview={FitH},
  pdftitle={The C Programming Language: Chapter 1},
  pdfauthor={Eric Bailey <eric@ericb.me>},
  pdfsubject={Exercises from Chapter 1 of the K&R C book}
  pdfkeywords={UNIX, C language, learning},
  colorlinks=true,
  linkcolor=ErlangRed,
  urlcolor=ErlangRed
}


\title{The C Programming Language: Chapter 1}


\date{%
  March 4, 2018
  \thanks{Last updated \today}
}


\begin{document}


\maketitle
@


\begin{abstract}
  \todoo{Write an abstract}
\end{abstract}


\tableofcontents

\section{Hello, world!}

Covers Exercises 1-1 and 1-2.

<<hello.c>>=
<<Include the standard I/O functions.>>


int main()
{
    printf("Hello, world!\n");
}
@


\section{Fahrenheit-Celsius table}

Covers Exercises 1-3, 1-4, and 1-5.

<<fahrcels.c>>=
<<Include the standard I/O functions.>>
<<Include the standard string functions.>>
@

Declare some useful constants.
<<fahrcels.c>>=
#define LOWER 0
#define UPPER 300
#define STEP  20
@ %def LOWER
@ %def UPPER
@ %def STEP

\subsection{Exercise 1-3}

<<fahrcels.c>>=
void print_header(char lhs[], char rhs[])
{
    printf("| %s | %s |\n", lhs, rhs);
    putchar('|');
    for (int i = -2; i < (int)strlen(lhs); ++i)
        putchar('-');
    putchar('+');
    for (int i = -2; i < (int)strlen(rhs); ++i)
        putchar('-');
    puts("|");
}
@ %def print_header


\subsection{Exercise 1-4}
<<fahrcels.c>>=
void celsfahr()
{
    print_header("Celsius", "Fahrenheit");
    for (int celsius = 0; celsius <= 300; celsius += 20)
        printf("| %7d | %10.0f |\n", celsius, 32.0 + (9.0/5.0) * celsius);
}
@ %def celsfahr


\subsection{Exercise 1-5}
<<fahrcels.c>>=
void fahrcels()
{
    print_header("Fahrenheit", "Celsius");
    for (int fahr = UPPER; fahr >= LOWER; fahr -= STEP)
        printf("| %10d | %7.1f |\n", fahr, (5.0/9.0) * (fahr-32.0));
}
@ %def fahrcels


\subsection{The \cee{main} function}

<<fahrcels.c>>=
int main()
{
    fahrcels();
    puts("\n");
    celsfahr();

    return 0;
}
@

\section{Copy}

Covers Exercises 1-6 and 1-7.


\begin{marginfigure}
<<For each character [[c]] until [[EOF]]>>=
while ((c = getchar()) != EOF)
@

<<Print the character.>>=
putchar(c);
@
\end{marginfigure}

<<copy.c>>=
<<Include the standard I/O functions.>>


int main()
{
    int c;
    <<For each character [[c]] until [[EOF]]>>
        <<Print the character.>>

    return 0;
}
@

\section{Character Counting}

<<wc.c>>=
<<Include the standard I/O functions.>>
<<Include the boolean type and values.>>
@

<<wc.c>>=
double char_count()
{
    double nc;

    for (nc = 0; getchar() != EOF; ++nc)
        ;

    return nc;
}
@ %def char_count


\section{Line Counting}

\begin{marginfigure}
<<the character is a newline>>=
c == '\n'
@
\end{marginfigure}

<<wc.c>>=
int line_count()
{
    int c, nl;

    nl = 0;
    <<For each character [[c]] until [[EOF]]>>
        if (<<the character is a newline>>)
            ++nl;

    return nl;
}
@ %def line_count

\subsection{Exercise 1-8}


\begin{marginfigure}
<<the character is a tab>>=
c == '\t'
@
\end{marginfigure}


For our purposes, whitespace is a space, tab, or newline.
<<the character is whitespace>>=
c == ' ' || <<the character is a newline>> || <<the character is a tab>>
@

<<wc.c>>=
bool is_whitespace(int c)
{
    return (<<the character is whitespace>>);
}


@ %def is_whitespace


<<wc.c>>=
double ws_count()
{
    double ns = 0;
    int c = 0;

    <<For each character [[c]] until [[EOF]]>>
        if (is_whitespace(c))
            ++ns;

    return ns;
}
@ %def ws_count


\subsection{Exercise 1-9}

<<catblanks.c>>=
<<Include the standard I/O functions.>>
<<Include the boolean type and values.>>


int main()
{
    int c;
    bool prev_blank = false;

    <<For each character [[c]] until [[EOF]]>> {
        if (!(prev_blank && c == ' '))
            <<Print the character.>>
        prev_blank = (c == ' ');
    }


    return 0;
}
@


\subsection{Exercise 1-10}

\begin{marginfigure}
<<unambiguous.c>>=
<<Include the standard I/O functions.>>


int main()
{
@
\end{marginfigure}

Process each character \cee{c}.
<<unambiguous.c>>=
int c;

    <<For each character [[c]] until [[EOF]]>> {
@

Replace each tab by \cee{\t}.
<<unambiguous.c>>=
        if (<<the character is a tab>>)
            fputs("\\t", stdout);
@

\begin{marginfigure}
<<the character is a backspace>>=
c == '\b'
@
\end{marginfigure}

Replace each backspace by \cee{\b}.
<<unambiguous.c>>=
        else if (<<the character is a backspace>>)
           fputs("\\b", stdout);
@

\begin{marginfigure}
<<the character is a backslash>>=
c == '\\'
@
\end{marginfigure}

Replace each backslash by \cee{\\}.
<<unambiguous.c>>=
        else if (<<the character is a backslash>>)
            fputs("\\\\", stdout);
@

Otherwise print the character unchanged.
<<unambiguous.c>>=
        else
            <<Print the character.>>
@

\begin{marginfigure}
Finally, close the \cee{while} loop and exit.
<<unambiguous.c>>=
    }

    return 0;
}
@
\end{marginfigure}


\section{Word Counting}

<<wc.c>>=
#define IN  1
#define OUT 0
@ %def IN
@ %def OUT

<<wc.c>>=
int main()
{
    int c, nl, nw, nc, state;

    state = OUT;
    nl = nw = nc = 0;
    <<For each character [[c]] until [[EOF]]>> {
        ++nc;
        if (<<the character is a newline>>)
            ++nl;
        if (<<the character is whitespace>>)
            state = OUT;
        else if (state == OUT) {
          state = IN;
          ++nw;
        }
    }

    printf("%7d%8d%8d\n", nl, nw, nc);

    return 0;
}
@


\subsection{Exercise 1-12}

<<words.c>>=
<<Include the standard I/O functions.>>


#define IN    1
#define OUT   0


int main()
{
    int c, state;

    state = OUT;
    <<For each character [[c]] until [[EOF]]>> {
        if (<<the character is whitespace>>) {
            if (state == IN)
                putchar('\n');
            state = OUT;
        } else {
            state = IN;
        }

        if (state == IN)
            putchar(c);
    }


    return 0;
}
@


\section{Arrays}

\subsection{Exercise 1-13}

\todoo{Vertical histogram}

<<wordlength.c>>=
<<Include the standard I/O functions.>>


#define IN    1
#define OUT   0

#define MAX_WORD_LENGTH 10
#define TERM_WIDTH 80


int main()
{
    int c, state, wl;
    int length[MAX_WORD_LENGTH+1];

    for (int i = 0; i <= MAX_WORD_LENGTH; ++i)
        length[i] = 0;

    state = OUT;
    wl = 0;
    <<For each character [[c]] until [[EOF]]>> {
        if (<<the character is whitespace>>) {
            if (state == IN) {
                state = OUT;
                ++length[wl <= MAX_WORD_LENGTH ? wl-1 : MAX_WORD_LENGTH];
            }
        } else {
            if (state == OUT) {
                state = IN;
                wl = 0;
            }
            ++wl;
        }
    }

    for (int j = 0; j <= MAX_WORD_LENGTH; ++j) {
        if (j == MAX_WORD_LENGTH)
            printf(">%d: ", MAX_WORD_LENGTH);
        else
            printf(" %2d: ", j+1);

        for (int k = 0; k < length[j]; ++k)
            putchar('#');
        putchar('\n');
    }


    return 0;
}
@


\subsection{Exercise 1-14}

<<charfreq.c>>=
<<Include the standard I/O functions.>>


#define MIN_ASCII 0
#define MAX_ASCII 0177


@

<<charfreq.c>>=
void prchar(int c)
{
    switch (c) {
        case ' ':
            printf("%11s", "<space>");
	    break;
	case '\b':
	    printf("%11s", "<backspace>");
	    break;
	case '\n':
	    printf("%11s", "<newline>");
	    break;
	case '\t':
	    printf("%11s", "<tab>");
	    break;
	default:
	    /* FIXME: why can't I return this? */
	    /* return ((char[2]) { (char) c, '\0' }); */
	    printf("%11c", c);
	    break;
    }
}


@ %def prchar

<<charfreq.c>>=
int main()
{
    int c;
    int freq[MAX_ASCII+1] = {0};

    <<For each character [[c]] until [[EOF]]>>
        ++freq[c];

    for (int i = 0; i <= MAX_ASCII; ++i) {
        if (!freq[i]) continue;

	prchar(i);
	fputs(": ", stdout);
	for (int j = 0; j < freq[i]; ++j)
            putchar('#');
        putchar('\n');
    }


    return 0;
}
@


\section{Functions}

\todoo{Exercise 1-15}


\todoo{Exercise 1-16}


\section{Character Arrays}

\todoo{Exercise 1-17}


\todoo{Exercise 1-18}


\todoo{Exercise 1-19}


\section{External Variables and Scope}

\todoo{Exercise 1-20}


\todoo{Exercise 1-21}


\todoo{Exercise 1-22}


\todoo{Exercise 1-23}


\todoo{Exercise 1-24}


\section{Common Headers}

<<Include the boolean type and values.>>=
#include <stdbool.h>
@ %def bool


<<Include the standard I/O functions.>>=
#include <stdio.h>
@ %def fputs
@ %def printf
@ %def putchar
@ %def puts
@ %def stdout

<<Include the standard string functions.>>=
#include <string.h>
@ %def strlen


\newpage
\section{Chunks}
\nowebchunks


\section{Index}
\nowebindex


% \bibliography{ch01}
% \bibliographystyle{plainnat}


% \newpage
% \listoftodos[To-Do]


\end{document}
